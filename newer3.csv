,index,language,proj_id,file_id,file_body
13757,13760,MATLAB,18682,113761,"function forest_fire(f,p,N,M)
% Forest fire
if nargin<4;
	M=200;
end
if nargin<3;
	N=200;
end
if nargin<2;
	p=.03;
end
if nargin<1;
	f=p*.0001;
end

% initialize;
F = (rand(M,N) < p)+1;  % tree with probability p
S = ones(3); S(2,2)=0;  % surrounding

textmap = ' T#';
colormap([.5,.5,.5;0,1,0;1,0,0]);
while(1)
	image(F); pause(.1)    % uncomment for graphical output
	% disp(textmap(F));	pause;		  % uncomment for textual output 		
	G = ((F==1).*((rand(M,N)<p)+1));  % grow tree
	G = G + (F==2) .* ((filter2(S,F==3)>0) + (rand(M,N)<f) + 2);  % burn tree if neighbor is burning or by chance f
	G = G + (F==3);						 % empty after burn
	F = G;
end;
"
3177,3178,Java,11597,103179,"for (int i = 0; i < 5; i++) {
   for (int j = 0; j <= i; j++) {
      System.out.print(""*"");
   }
   System.out.println();
}
"
11083,11085,Kotlin,16802,111086,"// version 1.1.3

import java.io.File
import javax.sound.sampled.*

const val RECORD_TIME = 20000L // twenty seconds say

fun main(args: Array<String>) {
    val wavFile = File(""RecordAudio.wav"")
    val fileType = AudioFileFormat.Type.WAVE
    val format = AudioFormat(16000.0f, 16, 2, true, true)
    val info = DataLine.Info(TargetDataLine::class.java, format)
    val line = AudioSystem.getLine(info) as TargetDataLine

    // Creates a new thread that waits for 'RECORD_TIME' before stopping
    Thread(object: Runnable {
        override fun run() {
            try {
                Thread.sleep(RECORD_TIME)
            }
            catch (ie: InterruptedException) {
                println(ie.message)
            }
            finally {
                line.stop()
                line.close()
            }
            println(""Finished"")
         }
    }).start()

    // Captures the sound and saves it in a WAV file
    try {
        if (AudioSystem.isLineSupported(info)) {
            line.open(format)
            line.start()
            println(""Recording started"")
            AudioSystem.write(AudioInputStream(line), fileType, wavFile)
        }
        else println(""Line not supported"")
    }
    catch (lue: LineUnavailableException) {
        println(lue.message)
    }
}
"
15963,15967,Perl,19823,115968,"sub gcd($$) {
  my ($u, $v) = @_;
  if ($v) {
    return gcd($v, $u % $v);
  } else {
    return abs($u);
  }
}
"
5991,5992,Rust,13347,105993,"let var = 1;
println!(""address of var: {:p}"", &var);
"
